#+TITLE: Kelmics 

_About_
 TODO

_Usage_


_Installation_


_Building_


_wiki_

* Building
This is a Kotlin Multiplatform project targeting Android, iOS, Web, Desktop, Server.

 - ./gradlew wasmJsBrowserRun -t  (web run)

 - ./gradlew kotlinUpgradeYarnLock (yarn upgrade)
 
You can open the web application by running the `:composeApp:wasmJsBrowserDevelopmentRun` Gradle task.

This is a Kotlin Multiplatform project targeting Android, iOS, Web, Desktop, Server.

* `/composeApp` is for code that will be shared across your Compose Multiplatform applications.
  It contains several subfolders:
  - `commonMain` is for code that’s common for all targets.
  - Other folders are for Kotlin code that will be compiled for only the platform indicated in the folder name.
    For example, if you want to use Apple’s CoreCrypto for the iOS part of your Kotlin app,
    `iosMain` would be the right folder for such calls.

* `/iosApp` contains iOS applications. Even if you’re sharing your UI with Compose Multiplatform,
  you need this entry point for your iOS app. This is also where you should add SwiftUI code for your project.

* `/server` is for the Ktor server application.

* `/shared` is for the code that will be shared between all targets in the project.
  The most important subfolder is `commonMain`. If preferred, you can add code to the platform-specific folders here too.

./gradlew wasmJsBrowserRun -t

Learn more about [Kotlin Multiplatform](https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html),
[Compose Multiplatform](https://github.com/JetBrains/compose-multiplatform/#compose-multiplatform),
[Kotlin/Wasm](https://kotl.in/wasm/)…

We would appreciate your feedback on Compose/Web and Kotlin/Wasm in the public Slack channel [#compose-web](https://slack-chats.kotlinlang.org/c/compose-web).
If you face any issues, please report them on [GitHub](https://github.com/JetBrains/compose-multiplatform/issues).

You can open the web application by running the `:composeApp:wasmJsBrowserDevelopmentRun` Gradle task.

./gradlew kotlinUpgradeYarnLock

# build wasm
./gradlew wasmJsBrowserDistribution



* TODO LIST

- [X] add command history, (as a default buffer?)
- [X] Add selectable/copyable text
  
- [ ] add read-remote-file
- [ ] adapt wasmjs build to be able to connect to remote server
- [ ] add HttpClient with hooks for integrating into MAL
- [ ] finish MAL language
- [X] add read-buffer command (read-buffer "BUFFER-NAME") => "returns the buffer contents as malstring"
- [X] add write-buffer command (write-buffer "BUFFER-NAME" "contents") => NIL /returns NIL, append writes string to buffer contents/
- [ ] add safe typing and documentation for functions.
  
- [ ] add file-path to MalBuffer, allowing name to be more of a display name
- [ ] add varible hooks into app color scheme
- [ ] Add file type modes (html w/ html render & highlighting, etc)
- [ ] the mini-buffer prompt open/close.
- [ ] mini-buffer auto complete
- [ ] macro support
- [ ] write remote-file
- [ ] dired clone
- [ ] editable buffers
- [ ] save-file command (save-file CURRENT-BUFFER) => NIL (save buffer contents into file)
- [ ] support split window displaying multiple buffers
- [ ] add https://github.com/Animeshz/keyboard-mouse-kt support
